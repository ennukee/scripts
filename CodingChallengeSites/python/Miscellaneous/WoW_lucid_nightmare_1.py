inp = """01110111 00100 10010110 10101 
11110111 01100 01111111 01000 
011010111001011010010110 10111101 
11001 00111111 10010 01001001 
10000 011010010110100111010110 
01011011 11110 11110001 11111 
11100000 00010 11111111 01000 
10110111 10101 01111111 00001 
10101110 11111 00110000 01000 
101101010010101110010110"""

# 01110111 
#    00100
# 10010110
#    10101
# 00000100 -> 3 / 6 

# 11110111
#    01100
# 01111111
#    01000
#  -> 0

# 011010111001011010010110
# 10111101 -> 6 / 3

#    11001
# 00111111
#    10010
# 01001001 -> 0

# 011010010110100111010110
#                    10000 -> 5 / 1 ? 5 / 4

# 01011011
#    11110
# 11110001
#    11111
# 00010000 -> 5 / 4

# 11100000
#    00010
# 11111111
#    01000 -> 0

# 10110111
#    10101
# 01111111
#    00001 
# 00000001-> 1 / 8

# 10101110
#    11111
# 00110000
#    01000 -> 0 

# 101101010010101110010110

# normal: 306055010?
# invers: ?010550603
# norm+1: 417166121?
# inve+1: ?121661714


norm_outs = []
inv_outs = []

for i in inp.split(' '):
	i = i.strip("\n")
	if i == " ": continue

	out = int(i, 2)
	norm_outs.append(out)

	inv = i.replace('0', '2').replace('1', '0').replace('2','1')
	print("{}-{}".format(i, inv))
	inv_out = int(inv, 2)
	inv_outs.append(inv_out)
	
print(norm_outs)
print(inv_outs)

inp2 = [136, 27, 105, 10]#[119, 4, 150, 21]

inps = [[119, 4, 150, 21], 
		[247, 12, 127, 8], 
		# invalid line here
		[25, 63, 18, 73], 
		# invalid line here
		[91, 30, 241, 31], 
		[224, 2, 255, 8], 
		[183, 21, 127, 1],
		[174, 31, 48, 8]]

i_inps = [[137, 27, 105, 10],
		  [8, 19, 128, 23],
		  # invalid line here
		  [6, 192, 13, 182],
		  # invalid line here
		  [164, 1, 14, 0],
		  [31, 29, 0, 23],
		  [72, 10, 128, 30],
		  [81, 0, 207, 23]]

for i in i_inps:

	o = ["{}{}{}{}{}{}{}".format(i[0],x,i[1],y,i[2],z,i[3]) for x in "+-/*" for y in "+-/*" for z in "+-/*"]
	o2 = []
	for x in o:
		try:
			r = eval(x)
		except ZeroDivisionError as e:
			r = -20
		if r >= -9.9 and r <= 9.9 and int(eval(x)) == eval(x):
			o2.append(r)
	print(o2)

# 136 27 105 10
# 8 19 128 23
# 9726313 66
# 6 192 13 182
# 15 9868841
# 164 1 14 0
# 31 29 0 23
# 72 10 128 30
# 81 0 207 23
# 4904041

# 119 4 150 21
# 247 12 127 8
# 7050902 189
# 25 63 18 73
# 16 6908374
# 91 30 241 31
# 224 2 255 8
# 183 21 127 1
# 174 31 48 8
# 11873174